var node = typeof process != 'undefined' && process.versions && process.versions.node != undefined;

if(node){
  assert  = require('assert');
  boxcars = require('../boxcars');
} else {
  module = {};
  assert = {
    'equal': function(a, b){
      if( a !== b ){
        throw new Error('Assertion Error: '+ a +' != ' + b); 
      }
    }
  };
}

var URI1 = node && 'http://kodfabrik.com/pi1' || '/scripts/test/files/pi1',
    URI2 = node && 'http://kodfabrik.com/pi2' || '/scripts/test/files/pi2',
    URI3 = node && 'test/files/pi3' || '/scripts/test/files/pi3';

function testArgs(callback){
  boxcars(URI1, URI2)(URI3, function(error, pi){
    assert.equal(arguments.length, 2);
    assert.equal(pi.length, 3);
    assert.equal(pi[0], '3.14\n');
    assert.equal(pi[1], '159\n');
    assert.equal(pi[2], '265\n');
    callback();
  });
}

function testArray(callback){
  boxcars( [ URI1, URI2, URI3 ] )(function(error, pi){
    assert.equal(arguments.length, 2);
    assert.equal(pi.length, 3);
    assert.equal(pi[0], '3.14\n');
    assert.equal(pi[1], '159\n');
    assert.equal(pi[2], '265\n');
    callback();
  });
}

function testObj(callback){
  boxcars({ 'a': URI1, 'b': URI2, 'c': URI3 })(function(error, pi){
    assert.equal(arguments.length, 2);
    assert.equal(Object.keys(pi).length, 3);
    assert.equal(pi.a, '3.14\n');
    assert.equal(pi.b, '159\n');
    assert.equal(pi.c, '265\n');
    callback();
  });
}

function testCaching(callback){
  var coll = boxcars(URI1);

  coll.cache()[ URI1 ] = '@3.14';
  coll.cache()[ URI3 ] = '@265';

  coll(URI2, URI3, function(error, pi){
    assert.equal(arguments.length, 2);
    assert.equal(pi.length, 3);
    assert.equal(pi[0], '@3.14');
    assert.equal(pi[1], '159\n');
    assert.equal(pi[2], '@265');
    callback();
  });

}

module.exports = {
  'testArgs': testArgs,
  'testArray': testArray,
  'testObj': testObj,
  'testCaching': testCaching
};

