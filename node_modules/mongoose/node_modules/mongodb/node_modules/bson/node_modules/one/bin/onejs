#!/usr/bin/env node

var opt     = require('optimist'),
    debug   = require('../lib/debug')('bin'),
    help    = require('../lib/help'),
    version = require('../lib/version');

var argv = opt
      .options('debug', { alias: 'd' })
      .options('target', { alias: 'o' })
      .options('require', { alias: 'r' })
      .options('alias', { alias: 'a' })
      .options('tie', { alias: 't' })
      .options('exclude', { alias: 'e' })
      .options('version', { alias: 'v' })
      .options('help', { alias: 'h' })
      .argv;

if(argv.help) help();
if(argv.version) version();
if(argv._[0] == 'build') argv._.splice(0, 1);

var manifest, target = argv.target;

if( argv._.length == 1){

  if( argv._[0].indexOf('.json') > -1 )
    manifest = argv._[0];
  else if(!target)
    target = argv._[0];

} else if( argv._.length >= 2 ) {

  manifest = argv._[0];
  target || (target = argv._[1]);

}

manifest || ( manifest = './package.json' );

debug('Manifest: %s', manifest);
debug('Target: %s', target);

var bundle = require('../lib/chaining')(manifest);

argv.debug && bundle.debug();
optionalDeps();
alias();
tie();

target ? bundle.save(target) : bundle.save();

function optionalDeps(){
  if(!argv.require) return;

  argv.require.split(',')
    .map(function(el){
      el = el.split(/=|:/);
      bundle.dependency(el[0], el[1] || '*');
    });
}

function alias(){
  if(!argv.alias) return;

  argv.alias.split(',')
    .filter(function(el){
      return el && ( el.indexOf('=') > -1 || el.indexOf(':') > -1);
    })
    .map(function(el){
      el = el.split(/=|:/);
      bundle.alias(el[0], el[1]);
    });
}

function tie(){
  if(!argv.tie) return;

  argv.tie.split(',')
    .filter(function(el){
      return el && ( el.indexOf('=') > -1 || el.indexOf(':') > -1);
    })
    .map(function(el){
      el = el.split(/=|:/);
      bundle.tie(el[0], el[1]);
    });
}
